{"version":3,"sources":["assets/profile.jpeg","assets/404imgMsg-01.png","assets/404imgMsg-02.png","assets/404img.png","redux/charsDuck.js","redux/queries.js","components/Sidebar.js","components/SearchBar.js","components/CharCard.js","components/Paginator.js","components/CharMiniCard.js","components/CharsDetails.js","components/Results.js","components/Footer.js","pages/Home.js","pages/About.js","pages/Error.js","Routes.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","filterQuery","initialData","fetching","array","current","filter","pages","nextPage","prevPage","error","client","ApolloClient","uri","setFilterAction","filterType","dispatch","type","payload","setQuery","cleanAllAction","getState","getCharactersAction","input","page","query","gql","characters","variables","name","then","data","dataPlace","Object","keys","results","info","next","prev","episodes","locations","catch","console","log","connect","state","useState","visibility","setVisibility","toggleSidebar","sidebar","document","getElementById","main","style","width","marginLeft","setFilter","event","target","id","Fragment","className","onClick","onBlur","useLocation","pathname","to","searched","actualSearch","inputSearch","setTextToSearch","onSubmit","e","preventDefault","placeholder","aria-label","aria-describedby","autoFocus","onChange","value","length","disabled","height","viewBox","fill","xmlns","fillRule","d","querySelector","reset","CharCard","char","undefined","role","image","src","alt","episode","dimension","totalPages","actualPage","setActualPage","goBack","window","scrollTo","top","behavior","goFoward","CharMiniCard","CharsDetails","details","aria-labelledby","aria-hidden","data-dismiss","species","gender","air_date","map","index","key","residents","chars","element","data-toggle","data-target","Footer","date","Date","getDate","getMonth","getFullYear","Home","About","require","href","Error","Routes","exact","path","component","App","Boolean","location","hostname","match","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","generateStore","WithRouter","WithStore","WithApollo","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8ec41e32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.b6b3765b.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/404imgMsg-01.dcdb77d5.png\";","module.exports = __webpack_public_path__ + \"static/media/404imgMsg-02.52969e64.png\";","module.exports = __webpack_public_path__ + \"static/media/404img.04d2fa5e.png\";","import ApolloClient, {gql} from 'apollo-boost'   //importo ApolloClient y gql para utilizar en getCharactersAction version apollo\r\nimport {setQuery} from './queries'\r\n\r\n// constantes \r\nlet initialData = {             //creo una constante para el estado inicial\r\n    fetching : false,           //esto es para saber si estan cargando los pj o si ya cargaron\r\n    array: [],                  //esto contendrá la lista de pj completa\r\n    current: '',                //esto contendrá la búsqueda actual\r\n    filter: '',                 //esto contendrá el estado del filtro\r\n    pages: null,                //esto contendrá el total de páginas\r\n    nextPage: 1,                //esto contendrá el dato de la página siguiente a la que me encuentro (esto lo uso cuando uso graphql)\r\n    prevPage: null,\r\n    error: false\r\n}\r\n\r\nlet client = new ApolloClient({\r\n    uri : \"https://rickandmortyapi.com/graphql\"     //URL de la API del proyecto (cliente para apollo)\r\n})\r\n\r\nlet filterQuery                 //esto contendrá el query correspondiente a cada filtro\r\n\r\nlet GET_CHARACTERS = \"GET_CHARACTERS\"                   //constante que representa la acción actual\r\nlet GET_CHARACTERS_SUCCES = \"GET_CHARACTERS_SUCCES\"     //constante que representa la acción exitosa\r\nlet GET_CHARACTERS_ERROR = \"GET_CHARACTERS_ERROR\"       //constante que representa la acción errónea (sea cual sea el error)\r\n\r\nlet SET_FILTER = \"SET_FILTER\"\r\nlet SET_CURRENT = \"SET_CURRENT\"\r\n\r\nlet UPDATE_PREV_PAGE = \"UPDATE__PREV_PAGE\"              //constante que representa la actualización de página\r\nlet UPDATE_NEXT_PAGE = \"UPDATE_NEXT_PAGE\"               //constante que representa la actualización de página\r\nlet UPDATE_PAGES = \"UPDATE_PAGES\"                       //constante que representa la actualización de página\r\nlet CLEAR_ARRAY = \"CLEAR_ARRAY\"\r\nlet CLEAR_CURRENT = \"CLEAR_CURRENT\"\r\n\r\n// reducer          \r\nexport default function reducer(state=initialData, action){     //creo un switch y le coloco al estado, el valor de initialData\r\n    switch(action.type){\r\n        case UPDATE_NEXT_PAGE:\r\n            return {...state, nextPage:action.payload}\r\n\r\n        case UPDATE_PREV_PAGE:\r\n            return {...state, prevPage:action.payload}\r\n            \r\n        case UPDATE_PAGES:\r\n            return {...state, pages:action.payload}\r\n\r\n        case SET_FILTER:\r\n            return {...state, filter: action.payload}\r\n\r\n        case SET_CURRENT:\r\n            return {...state, current: action.payload}\r\n\r\n        case GET_CHARACTERS:\r\n            return {...state, fetching:true}\r\n\r\n        case GET_CHARACTERS_ERROR:\r\n            return {...state, fetching: false, error:action.payload}\r\n            \r\n        case GET_CHARACTERS_SUCCES:                                 //en caso de exito, devuelve lo que haya en state,\r\n            return {...state, array:action.payload, fetching:false} //más lo que hay en array que será lo que devuelve action.payload\r\n\r\n        case CLEAR_ARRAY:\r\n            return {...state, array: action.payload}\r\n\r\n        case CLEAR_CURRENT:\r\n            return {...state, current: action.payload}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// actions (action creators) o thunks\r\nexport let setFilterAction = (filterType) => (dispatch) => {\r\n    dispatch({                           //si es exitoso, despacho la toma de pjs exitosa\r\n        type: SET_FILTER,                //y mando el resultado de pjs\r\n        payload: filterType\r\n    })\r\n    filterQuery = setQuery(filterType)\r\n}\r\n\r\nexport let cleanAllAction = () => (dispatch, getState) => {\r\n    dispatch({                                      //si es exitoso, despacho la toma de pjs exitosa\r\n        type: CLEAR_ARRAY,                          //y mando el resultado de pjs\r\n        payload: []\r\n    })\r\n    dispatch({                                      //si es exitoso, despacho la toma de pjs exitosa\r\n        type: CLEAR_CURRENT,                        //y mando el resultado de pjs\r\n        payload: ''\r\n    })\r\n    dispatch({                                      \r\n        type: GET_CHARACTERS_ERROR,                 //actualizo la busqueda actual\r\n        payload: false\r\n    })\r\n}\r\n\r\nexport let getCharactersAction = (input, page) => (dispatch, getState) => {     //esta parte es igual: creo la función y retorno el dispatch que trae los pjs                                                            \r\n                                                                                //declaro el query que voy a pedirle a graphql\r\n                                                                                //($page:Int) es la declaración de una variable en graphql\r\n        let query = gql`${filterQuery}`\r\n        \r\n\r\n    //despacho GET_CHARACTERS\r\n    dispatch({                  \r\n        type: GET_CHARACTERS    \r\n    })\r\n    \r\n    let {nextPage} = getState().characters                  //declaro una variable nextPage que contendrá la página siguiente a la que me encuentro\r\n    \r\n    return client.query({                                       //pido a mi cliente de graphql con query\r\n        query,                                                  //le pido mi query definido antes\r\n        variables: {                                            //declaro y le paso unas variables\r\n            page: page? page : nextPage,                        //esta variable tendrá la página siguiente a la que me encuentro\r\n            filter: {\r\n                name: `${input? input : ''}`\r\n            }\r\n        }\r\n    })\r\n    .then(({data}) => {                              //obtengo una respuesta que está en data y el error\r\n        dispatch({                                      \r\n            type: SET_CURRENT,                              //actualizo la busqueda actual\r\n            payload: input\r\n        })\r\n        dispatch({                                      \r\n            type: GET_CHARACTERS_ERROR,                              //actualizo la busqueda actual\r\n            payload: false\r\n        })\r\n\r\n        let dataPlace = Object.keys(data)[0];               //capturo el tipo de retorno del query\r\n        if (dataPlace === 'characters'){\r\n            dispatch({                                          \r\n                type: GET_CHARACTERS_SUCCES,                    \r\n                payload: data.characters.results\r\n            })\r\n\r\n            dispatch({                                          \r\n                type: UPDATE_PAGES,                              \r\n                payload: data.characters.info.pages ? data.characters.info.pages : 1\r\n            })     \r\n            dispatch({                                          \r\n                type: UPDATE_NEXT_PAGE,                              \r\n                payload: data.characters.info.next ? data.characters.info.next : 1\r\n            })      \r\n            dispatch({                                          \r\n                type: UPDATE_PREV_PAGE,                              \r\n                payload: data.characters.info.prev ? data.characters.info.prev : 0\r\n            }) \r\n        }\r\n        else if (dataPlace === 'episodes'){\r\n            dispatch({                                          \r\n                type: GET_CHARACTERS_SUCCES,                    \r\n                payload: data.episodes.results \r\n            })\r\n\r\n            dispatch({                                          \r\n                type: UPDATE_PAGES,                              \r\n                payload: data.episodes.info.pages ? data.episodes.info.pages : 1\r\n            })     \r\n            dispatch({                                          \r\n                type: UPDATE_NEXT_PAGE,                              \r\n                payload: data.episodes.info.next ? data.episodes.info.next : 1\r\n            })      \r\n            dispatch({                                          \r\n                type: UPDATE_PREV_PAGE,                              \r\n                payload: data.episodes.info.prev ? data.episodes.info.prev : 0\r\n            }) \r\n        }\r\n        else {\r\n            dispatch({                                          \r\n                type: GET_CHARACTERS_SUCCES,                    \r\n                payload: data.locations.results \r\n            })\r\n\r\n            dispatch({                                          \r\n                type: UPDATE_PAGES,                              \r\n                payload: data.locations.info.pages ? data.locations.info.pages : 1\r\n            })     \r\n            dispatch({                                          \r\n                type: UPDATE_NEXT_PAGE,                              \r\n                payload: data.locations.info.next ? data.locations.info.next : 1\r\n            })      \r\n            dispatch({                                          \r\n                type: UPDATE_PREV_PAGE,                              \r\n                payload: data.locations.info.prev ? data.locations.info.prev : 0\r\n            }) \r\n        }\r\n        \r\n\r\n    })  \r\n    .catch(({error})=>{\r\n        console.log(error);            //si hay error, despacho la toma de pjs fallida\r\n        dispatch({\r\n            type: GET_CHARACTERS_ERROR,\r\n            payload: true            \r\n        })\r\n        return\r\n    })    \r\n        \r\n}","export let setQuery = (filter) => {\r\n    switch(filter){\r\n        case 'Characters':\r\n            return (`    \r\n            query ($page:Int, $filter: FilterCharacter) {\r\n                characters(page:$page, filter: $filter){\r\n                    info {\r\n                        pages\r\n                        next\r\n                        prev\r\n                    }\r\n                    results{\r\n                        name\r\n                        image\r\n                        id\r\n                        status\r\n                        species\r\n                        type\r\n                        gender\r\n                        created\r\n                    }\r\n                }\r\n            }\r\n        `)\r\n        case \"Episodes\":\r\n            return(`    \r\n            query($filter: FilterEpisode) {\r\n                episodes(filter: $filter) {\r\n                    info {\r\n                        pages\r\n                        next\r\n                        prev\r\n                        }\r\n                    results {\r\n                        name\r\n                        id\r\n                        air_date\r\n                        episode\r\n                        characters {\r\n                            name\r\n                            image\r\n                        }\r\n                        created\r\n                        }\r\n                }\r\n              }\r\n        `)\r\n        case 'Locations':\r\n            return (`\r\n                query($filter: FilterLocation) {\r\n                locations(filter: $filter) {\r\n                  info {\r\n                    pages\r\n                    next\r\n                    prev\r\n                  }\r\n                  results {\r\n                    name\r\n                    id\r\n                    type\r\n                    dimension\r\n                    residents {\r\n                      name\r\n                      image\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            `)\r\n        default: \r\n            return\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport {connect} from 'react-redux'\r\nimport {setFilterAction, cleanAllAction} from '../redux/charsDuck'\r\nimport {Link, useLocation} from 'react-router-dom'\r\n\r\n\r\nfunction Sidebar({setFilterAction, cleanAllAction}) {\r\n    const [visibility, setVisibility] = useState(false);\r\n\r\n// Show/Hide\r\nfunction toggleSidebar () {\r\n    let sidebar = document.getElementById(\"mySidebar\");\r\n    let main = document.getElementById(\"main\");\r\n    if (visibility){\r\n        sidebar.style.width = \"0\";\r\n        main.style.marginLeft= \"0\"\r\n    }\r\n    else{\r\n        sidebar.style.width = \"13rem\";\r\n        main.style.marginLeft = \"13rem\";\r\n    }\r\n    setVisibility(!visibility)\r\n}\r\n// Search Filter\r\nconst setFilter = (event) => {\r\n    let filter = event.target.id\r\n    setFilterAction(filter)\r\n    cleanAllAction()\r\n}\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <div>\r\n        <div id=\"main\">\r\n            <button className=\"openbtn\" onClick={toggleSidebar} onBlur={toggleSidebar}>☰</button>  \r\n        </div>  \r\n        <div id=\"mySidebar\" className=\"sidebar\">\r\n        {\r\n            useLocation().pathname === '/' ?\r\n            <>\r\n                <button id=\"Characters\" onClick={setFilter}>Character</button>\r\n                <button id=\"Locations\" onClick={setFilter}>Location</button>\r\n                <button id=\"Episodes\" onClick={setFilter}>Episode</button>\r\n            </>\r\n            :\r\n            <button><Link className=\"link\" to=\"/\">Home</Link></button> \r\n        }\r\n            <button><Link className=\"link\" to=\"/about\">About</Link></button>\r\n        </div>\r\n        </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction mapState(state){  \r\n    return {\r\n        filter: state.filter      \r\n    }\r\n    \r\n}     \r\n\r\nexport default connect(mapState, {setFilterAction, cleanAllAction})(Sidebar);\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  getCharactersAction, cleanAllAction  } from '../redux/charsDuck'\r\n\r\n\r\nfunction SearchBar({getCharactersAction, cleanAllAction, error}) {\r\n    const [inputSearch, setTextToSearch] = useState(' ')\r\n    \r\n// Input Handlers\r\nconst inputHandler = (event) => {\r\n    setTextToSearch(event.target.value)\r\n    if(event.target.value.length >2){\r\n    getCharactersAction(event.target.value, 1)\r\n    }\r\n}\r\nconst doSearch = (e) => {\r\n    e.preventDefault()\r\n    getCharactersAction(inputSearch, 1)\r\n}\r\n\r\n// Clean function\r\nconst cleanAll = () => {\r\n    setTextToSearch(' ')\r\n    document.querySelector('.searchBar').reset()\r\n    cleanAllAction()\r\n}\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <form className=\"searchBar input-group mb-3 w-25\" onSubmit={doSearch} >\r\n            <input type=\"text\" \r\n                className=\"form-control\"\r\n                placeholder=\"Type your search here...\" \r\n                aria-label=\"Type your search here...\" \r\n                aria-describedby=\"button-addon2\" \r\n                autoFocus\r\n                onChange={inputHandler}\r\n            />\r\n            <div className=\"input-group-append\">\r\n                <button\r\n                    //Enable search after third character\r\n                    disabled={inputSearch.length <= 2}                  \r\n                    className=\"submitbtn btn btn-outline-secondary\" \r\n                    type=\"submit\" \r\n                    id=\"button-addon2\">\r\n                        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-search\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path fillRule=\"evenodd\" d=\"M10.442 10.442a1 1 0 0 1 1.415 0l3.85 3.85a1 1 0 0 1-1.414 1.415l-3.85-3.85a1 1 0 0 1 0-1.415z\"/>\r\n                            <path fillRule=\"evenodd\" d=\"M6.5 12a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zM13 6.5a6.5 6.5 0 1 1-13 0 6.5 6.5 0 0 1 13 0z\"/>\r\n                        </svg>\r\n                </button>\r\n                <button className=\"btn btn-outline-danger\" type=\"button\" id=\"inputGroupFileAddon04\" onClick={cleanAll}>X</button>\r\n            </div>\r\n        </form>\r\n        {\r\n            error? <small className=\"errorWeb text-danger\"> Your search doesn't match to any data in any dimension</small> : null\r\n        }\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction mapState (state){\r\n    return {\r\n        error: state.characters.error,\r\n        searched: state.characters.actualSearch\r\n    }\r\n}\r\n\r\nexport default connect (mapState, { getCharactersAction, cleanAllAction })(SearchBar);\r\n","import React from 'react';\r\n\r\n\r\n\r\nfunction CharCard({char}) {\r\n\r\n\r\nif (char === undefined ){ \r\n    return  <div className=\"d-flex justify-content-center\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n} \r\n \r\nreturn (\r\n    <React.Fragment>\r\n        <div className=\"resCard card text-dark border-dark mb-3\" >\r\n            {\r\n                char.image? <img src={char.image} height='250' width='100%' alt={char.name} /> : null\r\n            }\r\n            <div className=\"card-body\">\r\n                <h5>{char.name}</h5>\r\n                {\r\n                    char.episode ? <h6>{char.episode}</h6> \r\n                    : \r\n                    char.dimension ? <h6>{char.dimension}</h6> \r\n                    : \r\n                    null\r\n                }\r\n            </div>\r\n        </div>\r\n        \r\n    </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default CharCard;\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {getCharactersAction} from '../redux/charsDuck'\r\n\r\n\r\n\r\nfunction Paginator( {totalPages, nextPage, prevPage, getCharactersAction, current} ) {\r\n    const [actualPage, setActualPage] = useState()\r\n\r\nconst goBack = () =>{\r\n    getCharactersAction(current, prevPage)\r\n    setActualPage(prevPage)\r\n    window.scrollTo({top: 0, behavior: 'smooth'})\r\n      \r\n}\r\n\r\nconst goFoward = () => {\r\n    getCharactersAction(current, nextPage)\r\n    setActualPage(nextPage)\r\n    window.scrollTo({top: 0, behavior: 'smooth'})\r\n}\r\n\r\n return (\r\n     <nav aria-label=\"Page navigation\">\r\n        <ul className=\"pagination justify-content-center pagination-sm\">\r\n            <li className=\"page-item\">\r\n                <button \r\n                    className=\"page-link\" \r\n                    disabled={prevPage===0} \r\n                    onClick={goBack}>\r\n                    Prev\r\n                </button>\r\n            </li>\r\n            \r\n            {\r\n                prevPage===0? \r\n                    null : <li className=\"page-item\"><button className=\"page-link\" onClick={goBack}>{prevPage}</button></li>\r\n            }\r\n            \r\n            <li className=\"page-item\"><div className=\"page-link\"><strong>{prevPage+1}</strong></div></li>\r\n            \r\n            {\r\n                actualPage===totalPages || totalPages === 1?\r\n                    null : <li className=\"page-item\"><button className=\"page-link\" onClick={goFoward}>{nextPage}</button></li>\r\n            }\r\n\r\n            <li className=\"page-item\">\r\n                <button \r\n                    className=\"page-link\" \r\n                    disabled={actualPage===totalPages || totalPages===1} \r\n                    onClick={goFoward}>\r\n                    Next\r\n                </button>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n )\r\n}\r\n\r\nfunction mapState (state){\r\n    return {\r\n        current: state.characters.current,\r\n        prevPage: state.characters.prevPage,\r\n        nextPage: state.characters.nextPage,\r\n        totalPages: state.characters.pages\r\n    }\r\n}\r\n\r\nexport default connect (mapState, {getCharactersAction})(Paginator);","import React from 'react';\r\n\r\n\r\n\r\nfunction CharMiniCard({char}) {\r\n\r\nif (char === undefined ){ \r\n    return  <div className=\"d-flex justify-content-center\">\r\n                <div className=\"spinner-border\" role=\"status\">\r\n                <span className=\"sr-only\">Loading...</span>\r\n                </div>\r\n            </div>\r\n} \r\n \r\nreturn (\r\n    <React.Fragment>\r\n    {   char.name === null ? <div>No character(s) info</div> \r\n        :\r\n        <div className=\"miniCards card text-dark border-dark mb-3\" >\r\n            <div className=\"card-header\" >\r\n                <img src={char.image} alt={char.name} width='100%'/>\r\n            </div>\r\n\r\n            <div className=\"card-body mini\">\r\n                <h5>{char.name}</h5>\r\n            </div>\r\n        </div>\r\n    }  \r\n    </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default CharMiniCard;\r\n","import React from 'react';\r\nimport CharMiniCard from './CharMiniCard'\r\n\r\nfunction CharsDetails( {details} ) {\r\n\r\n    \r\nreturn (\r\n    <React.Fragment>\r\n        <div className=\"modal fade\" id={\"Modal\"+details.id} aria-labelledby=\"ModalLabel\" aria-hidden=\"true\">\r\n            <div className=\"modal-dialog modal-dialog-centered modal-lg\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header bg-dark text-light\">\r\n                    <h4 className=\"modal-title\" id=\"ModalLabel\">{details.name}</h4>\r\n                    <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                    </button>\r\n                    </div>\r\n                    <div className=\"modal-body container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-4\">\r\n                                {\r\n                                details.species?  (\r\n                                    <div> \r\n                                        <strong>SPECIES:</strong> {details.species} <br/>\r\n                                        <strong>TYPE:</strong> {details.type || 'No info available'} <br/>\r\n                                        <strong>GENDER:</strong> {details.gender || 'No info available'} <br/>\r\n                                    </div> \r\n                                    ) : \r\n                                    details.dimension? (\r\n                                        <div> \r\n                                            <strong>DIMENSION:</strong> {details.dimension} <br/>\r\n                                            <strong>TYPE:</strong> {details.type || 'No info available'} <br/>\r\n                                        </div> \r\n                                    ) : \r\n                                        <div> \r\n                                            <strong>RELEASE DATE:</strong> {details.air_date} <br/>\r\n                                            <strong>EPISODE:</strong> {details.episode} <br/>\r\n                                        </div> \r\n                                }\r\n                            </div>\r\n                            <div className=\"col-8 text-center\">\r\n                            {\r\n                                details.image? <img className=\"detailImg\" src={details.image} height='250' alt={details.name} /> \r\n                                :\r\n                                details.characters?\r\n                                <div>\r\n                                    <div><strong>CHARACTERS:</strong></div>\r\n                                    {\r\n                                        details.characters.map((char, index)=>{\r\n                                            if(index <=4){\r\n                                                return <CharMiniCard char={char} height='25' width='100%' key={index}/>\r\n                                            }\r\n                                            return null\r\n                                        })\r\n                                    } \r\n                                </div>\r\n                                :\r\n                                <div>\r\n                                    <div><strong>RESIDENTS:</strong></div>\r\n                                    {\r\n                                        details.residents.map((char, index)=>{\r\n                                            if(index <=4){\r\n                                                return <CharMiniCard char={char} height='25' width='100%' key={index}/>\r\n                                            }\r\n                                            return null\r\n                                        })\r\n                                    } \r\n                                </div>\r\n                            }\r\n                            \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default CharsDetails;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CharCard from './CharCard'\r\nimport Paginator from './Paginator'\r\nimport CharsDetails from './CharsDetails';\r\n\r\nfunction Results( {chars, error, filter} ) {\r\n    \r\n\r\n \r\nreturn (\r\n    <React.Fragment>\r\n    {\r\n        chars.length === 0 ? \r\n        <div> \r\n            <p className=\"text-muted noSearch-text\">▲ <br/> \r\n            Type and start Searching {filter}!</p> \r\n            {error ? \r\n                <p className=\"errorMob text-muted text-center\">\r\n                No data found ... \r\n                </p> : \r\n                null\r\n            }\r\n        </div> :\r\n        <>\r\n        <small className=\"text-muted\">Click the cards to get more information!</small>\r\n        <div className=\"container\">\r\n            <div className=\"row\" >\r\n            {\r\n                chars.map(element => {\r\n                    return (\r\n                        <div className=\"col\" key={element.id}> \r\n                            <div data-toggle=\"modal\" data-target={\"#Modal\"+element.id} type=\"button\">\r\n                                <CharCard char={element} /> \r\n                            </div>\r\n                            <CharsDetails details={element} />  \r\n                        </div>\r\n                        )\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n          \r\n        <Paginator />\r\n        </>\r\n    }\r\n        \r\n    </React.Fragment>\r\n    )\r\n}\r\n\r\nfunction mapState (state){\r\n    \r\n    return {\r\n        filter: state.characters.filter,\r\n        error: state.characters.error,\r\n        chars: state.characters.array\r\n    }\r\n}\r\n\r\nexport default connect (mapState)(Results);\r\n","import React from 'react';\r\n\r\n\r\n\r\nfunction Footer() {\r\n\r\n    const scrollUp = () => {\r\n    window.scrollTo({top: 0, behavior: 'smooth'})\r\n    }\r\n\r\n    let date = new Date( )\r\n    date = `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div id=\"scrollBtn\" onClick={scrollUp}>\r\n                <button className=\"scrollUp\" >\r\n                    <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" className=\"bi bi-chevron-double-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path fillRule=\"evenodd\" d=\"M7.646 2.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 3.707 2.354 9.354a.5.5 0 1 1-.708-.708l6-6z\"/>\r\n                        <path fillRule=\"evenodd\" d=\"M7.646 6.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1-.708.708L8 7.707l-5.646 5.647a.5.5 0 0 1-.708-.708l6-6z\"/>\r\n                    </svg>\r\n                </button>  \r\n            </div> \r\n            <p className=\"designer text-light small\">Design by SEBASTIAN TOSO</p>\r\n            <p className=\"time text-light small\">{date}</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport SearchBar from '../components/SearchBar'\r\nimport Results from '../components/Results'\r\nimport Footer from '../components/Footer'\r\n\r\nfunction Home() {\r\n\r\n\r\nreturn (\r\n    <React.Fragment>\r\n        <div className=\"search\">\r\n            <SearchBar /> \r\n        </div>\r\n        <div className=\"results\">\r\n            <Results />\r\n        </div>\r\n        <div className=\"footer\">\r\n            <Footer />\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default Home;\r\n\r\n","import React from 'react';\r\n\r\n\r\nfunction About() {\r\n\r\n\r\n \r\nreturn (\r\n    <React.Fragment>\r\n        <div className=\"text-center\">\r\n            <img src={require('../assets/profile.jpeg')} alt=\"Profile Avatar\" className=\"avatar\" /> <br/>\r\n\r\n                <h5>About me</h5>\r\n                <div className=\"aboutContainer\">\r\n                <p>Hi! my name is Sebastian, i'm from Argentina.<br/>\r\n                I'm a Trainee/Jr Front-end developer that tries to enter to this beautiful work world. <br/>\r\n                </p>\r\n                </div>\r\n                <h5>I've got skills in:</h5>\r\n                <div className=\"aboutContainer\">\r\n                <ul className=\"list\">\r\n                    <li>JavaScript</li>\r\n                    <li>React</li>\r\n                    <li>Redux</li>\r\n                    <li>Bootstrap</li>\r\n                    <li>Some little Angular and Typescript</li>\r\n                </ul>\r\n                </div>\r\n                <h5>About this page</h5>\r\n                <div className=\"aboutContainer\">\r\n                <p>This page was made for the Puzzle Challenge<br/>\r\n                It uses the <a href=\"https://rickandmortyapi.com/\" target=\"blank\" >Rick and Morty API</a> to get all data and\r\n                it's made using React, Redux and GraphQl. <br/>\r\n                Want to see the complete code? <br/>\r\n                Go to my <a href=\"https://github.com/Seba-Toso\" target=\"blank\" >Github</a>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nfunction Error() {\r\n\r\n\r\n \r\nreturn (\r\n    <React.Fragment>\r\n        <div className=\"errorMsg text-center\">\r\n            <img src={require('../assets/404imgMsg-01.png')} alt=\"404 Error Page\" className=\"errorImg404\" /> <br/>\r\n            <img src={require('../assets/404imgMsg-02.png')} alt=\"404 Error Page\" className=\"errorImgText\" /> <br/>\r\n            <img src={require('../assets/404img.png')} alt=\"404 Error Page\" className=\"errorImg\" /> <br/>\r\n            <Link to='/' className=\"errorBtn btn btn-outline-success\">Back Home</Link>\r\n        </div>\r\n    </React.Fragment>\r\n    )\r\n\r\n}\r\n\r\nexport default Error;\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'              \r\nimport Home from './pages/Home'\r\nimport About from './pages/About'\r\nimport Error from './pages/Error'\r\n\r\n\r\nexport default function Routes() {\r\n    return (                                                            \r\n        <Switch> \r\n            <Route exact path=\"/\" component={Home} />            \r\n            <Route path=\"/about\" component={About} />\r\n            <Route path=\"*\" component={Error} /> \r\n        </Switch>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\nimport Sidebar from './components/Sidebar'\n\nimport Routes from './Routes';\n\nimport './App.css';\nimport Home from './pages/Home';\nimport About from './pages/About'\nimport Error from './pages/Error'\n\nfunction App() {\n\n  \n  return (\n    <div className=\"App\">\n      <Sidebar />\n      <Routes>\n        <Home />\n        <About />\n        <Error />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore, combineReducers, compose, applyMiddleware} from 'redux'        //características que traigo de redux\r\nimport charsReducer, { setFilterAction } from './charsDuck'      //duck creado en charsDuck con el reducer que obtiene pj de la API  \r\nimport thunk from 'redux-thunk'                                                     //middleware para hacer promesas y peticiones al backend\r\n\r\n\r\nlet rootReducer = combineReducers({         //creo un reducer al que le daremos un valor de objeto y le pasaremos\r\n    characters: charsReducer                //combineReducers para que junte todos los reducers de mi app\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose; //Herramientas de desarrollador que traje desde github.com/zalmoxisus/redux-devtools-extension\r\n                                                                                 //pregunta si el navegador soporta las herramientas de desarrollador\r\n\r\n\r\n            //esta funcion crea un store y lo devuelve para usarlo en otro archivo\r\nexport default function generateStore(){\r\n    let store = createStore(\r\n        rootReducer, \r\n        composeEnhancers(applyMiddleware(thunk))\r\n        )\r\n\r\n    //llamo a la acción setFilter para inicialmente colocar el query a characters       \r\n                                                            \r\n    setFilterAction('Characters')(store.dispatch, store.getState)   //Al incio y creación del store, llamo a la función filtro para \r\n                                                                    //darle un valor inicial de Charactes (busqueda default)                                                             \r\n    return store\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\nimport {Provider} from 'react-redux'               //traigo el provider desde react-redux para poder pasar el store\nimport generateStore from './redux/store'          //traigo las funciones generateStore desde store.js\nimport  ApolloClient  from 'apollo-boost'          //traigo el cliente desde apollo-boost. OJO-> sin llaves\nimport { ApolloProvider } from 'react-apollo'      //traigo el provider de apollo desde reac-apollo para poder pasar el client\n\nlet store = generateStore()                        //capturo el store generado desde generateStore\n\nlet client = new ApolloClient({                     //creo un cliente que será una nueva instacia de apolloClient y le paso la uri\n    uri: \"https://rickandmortyapi.com/graphql\"      //del graphQL de la API de RickandMorty\n})\nlet WithRouter = () => <BrowserRouter><App /></BrowserRouter>\nlet WithStore  = () => <Provider store={store}><WithRouter /></Provider>                  //al provider de redux le paso como props el store\nlet WithApollo = () =>  <ApolloProvider client={client}><WithStore/></ApolloProvider>    //al provider de apollo le paso como props el store\n\nReactDOM.render(<WithApollo />, document.getElementById('root'));    //renderizo desde withStore que adentro tiene WithRouter\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}